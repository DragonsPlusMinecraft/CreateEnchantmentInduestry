plugins {
    id 'idea'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.3.5"
}

version = mod_version
group = 'plus.dragons.createenchantmentindustry'
archivesBaseName = "create_enchantment_industry-${artifact_minecraft_version}-for-create-${create_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=create_enchantment_industry.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.enabledGameTestNamespaces', 'create_enchantment_industry'
            mods {
                create_enchantment_industry {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            arg '-mixin.config=create_enchantment_industry.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'create_enchantment_industry'
            mods {
                create_enchantment_industry {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'create_enchantment_industry',
                 '--all', '--output', file('src/generated/resources/'),
                 '--existing', file('src/main/resources/'),
                 '--existing-mod', 'create'
            mods {
                create_enchantment_industry {
                    source sourceSets.main
                }
            }
        }
    }
}

jarJar.enable()

repositories {
    mavenLocal()
    maven {
        name 'Tterrag Maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'Blamejared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'TheIllusiveC4 Maven'
        url 'https://maven.theillusivec4.top/'
    }
    maven {
        name 'DragonsPlus Maven'
        url "https://maven.dragons.plus/releases"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    jarJar(group: 'plus.dragons.createdragonlib', name: "create_dragon_lib-${minecraft_version}", version: "${create_dragon_lib_version_range}") {
        transitive = false
        jarJar.pin(it, project.create_dragon_lib_version)
    }

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}-${create_version_build}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation fg.deobf("plus.dragons.createdragonlib:create_dragon_lib-${minecraft_version}:${create_dragon_lib_version}")

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'create_enchantment_industry.refmap.json'
    config 'create_enchantment_industry.mixins.json'

    debug.verbose = true
    debug.export = true
}

jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "create_enchantment_industry",
                "Specification-Vendor"    : "dragonsplus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "dragonsplus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'create_enchantment_industry.mixins.json'
        ])
    }
}

void addLicense(jarTask) {
    jarTask.from('LICENSE')
}

void removeRedundant(jarTask){
    jarTask.exclude(".cache")
    jarTask.exclude("assets/create_enchantment_industry/lang/unfinished")
    jarTask.exclude("assets/create_enchantment_industry/lang/default")
}

publishMods {
    file = tasks.jarJar.archiveFile
    changelog = new File("changelog/${mod_version}.md").toString()
    version = mod_version
    type = STABLE
    displayName = "CEI ${mod_version} for Create ${minecraft_version}-${create_version}"
    modLoaders.add("forge")
    modLoaders.add("neoforge")

    curseforge {
        projectId = "688768"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "create"
        }
    }

    modrinth {
        projectId = "JWGBpFUP"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "create"
        }
    }
}

jar.finalizedBy('reobfJar')
addLicense(jar)
removeRedundant(jar)
tasks.jarJar.setArchiveClassifier('')
tasks.jarJar.finalizedBy('reobfJarJar')
addLicense(tasks.jarJar)
removeRedundant(tasks.jarJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            fg.component(it)
            jarJar.component(it)
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
